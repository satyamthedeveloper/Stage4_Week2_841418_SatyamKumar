import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the bfs function below.
    static int[] bfs(int n, int m, int[][] edges, int s) {

        ArrayList<Integer> queue = new ArrayList<Integer>();
        queue.add(s);

        int[] distances = new int[n];
        Arrays.fill(distances, -1);
        distances[s-1] = 0;

        while(!queue.isEmpty()){
            
            for(int i = 0; i < m; i++){
                int node1 = edges[i][0];
                int node2 = edges[i][1];    

                if(node2 == queue.get(0)){
                    int temp = node1;
                    node1 = node2;
                    node2 = temp;
                    System.out.println("swapped: " + node2 + " " + node1);
                }

                if(node1 == queue.get(0) && !queue.contains(node2) && distances[node2-1] == -1){
                    queue.add(node2);
                    System.out.println("added:" + node2);

                    if(distances[node2-1] == -1){
                        distances[node2-1] = distances[node1-1]+6;
                    }
                }
            }            
            
            queue.remove(0);
        }

        int[] result = new int[n-1];
        int k = 0;
        int j = 0;
        while(k != n-1){
            if(distances[j] != 0){
                result[k] = distances[j];
                k++;
            }
            
            j++;
        }

        return result;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int qItr = 0; qItr < q; qItr++) {
            String[] nm = scanner.nextLine().split(" ");

            int n = Integer.parseInt(nm[0]);

            int m = Integer.parseInt(nm[1]);

            int[][] edges = new int[m][2];

            for (int i = 0; i < m; i++) {
                String[] edgesRowItems = scanner.nextLine().split(" ");
                scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

                for (int j = 0; j < 2; j++) {
                    int edgesItem = Integer.parseInt(edgesRowItems[j]);
                    edges[i][j] = edgesItem;
                }
            }

            int s = scanner.nextInt();
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

            int[] result = bfs(n, m, edges, s);

            for (int i = 0; i < result.length; i++) {
                bufferedWriter.write(String.valueOf(result[i]));

                if (i != result.length - 1) {
                    bufferedWriter.write(" ");
                }
            }

            bufferedWriter.newLine();
        }

        bufferedWriter.close();

        scanner.close();
    }
}
